/**
 * @module real-time-collaboration/realtimecollaborativeediting/websocketgateway
 * @publicApi
 */
import { ContextPlugin, type Plugin, type ContextPluginDependencies, type Editor, type Context } from 'ckeditor5/src/core';
import { type Emitter, type Observable } from 'ckeditor5/src/utils';
import WebSocketGatewayProvider, { WEB_SOCKET_GATEWAY_STATES } from '@ckeditor/ckeditor-cloud-services-collaboration/src/websocketgateway/websocketgateway';
export default class WebSocketGateway extends ContextPlugin {
    static WebSocketGateway: typeof WebSocketGatewayProvider;
    static initialReconnectionInterval: number;
    connection: WebSocketGatewayProvider & Emitter & Observable;
    /**
     * The connection state.
     *
     * The `connected` state is set when both, the browser and the WebSocket, are connected.
     */
    state: WEB_SOCKET_GATEWAY_STATES;
    static get requires(): ContextPluginDependencies;
    /**
     * @inheritDoc
     */
    static get pluginName(): 'WebSocketGateway';
    constructor(context: Editor | Context);
    /**
     * @inheritDoc
     */
    init(): Promise<unknown>;
    /**
     * Registers a plugin that will be reconnected when the connection is back.
     * The plugin needs to implement the `reconnect()` method.
     */
    addToReconnectionStack(plugin: ReconnectPlugin | ReconnectContextPlugin): void;
    /**
     * Removes the plugin from the reconnection stack.
     */
    removeFromReconnectionStack(plugin: ReconnectPlugin | ReconnectContextPlugin): void;
    /**
     * Checks if the plugin is present in the reconnection stack.
     */
    isInReconnectionStack(plugin: ReconnectPlugin | ReconnectContextPlugin): boolean;
    /**
     * @inheritDoc
     */
    destroy(): void;
}
interface Reconnect {
    reconnect: () => void | Promise<void>;
}
export type ReconnectPlugin = Plugin & Reconnect;
export type ReconnectContextPlugin = ContextPlugin & Reconnect;
export {};
