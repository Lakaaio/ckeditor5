/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const upath = require( 'upath' );
const glob = require( 'glob' );
const { SitemapStream, streamToPromise } = require( 'sitemap' );
const fs = require( 'fs' );

/**
 * Creates a sitemap.xml file and saves it to build directory.
 *
 * @param {String} buildPath Path to the build directory.
 * @param {String} hostname Hostname of the website where the documentation will be hosted.
 * @param {String} dst Additional path in the build directory where to save the sitemap.xml.
 * @param {Object} options Additional options.
 * @param {Array.<String>} options.excludedUrls An array of urls to be excluded from the sitemap.
 * @param {Array.<Object>} options.extraUrlSettings An array of config objects per url. Currently used to set custom priority per url.
 * @returns {Promise}
 */
module.exports = ( buildPath, hostname, dst = '', options = {} ) => {
	const pattern = upath.join( buildPath, '**', '*.html' );
	const pathsToFiles = glob.sync( pattern );
	const sitemap = new SitemapStream( {
		hostname,
		cacheTime: 600000
	} );

	for ( const filePath of pathsToFiles ) {
		const urlForSitemap = filePath.replace( buildPath, 'docs' ).replace( /(\/[^/]+\/)[^/]+\//, '$1latest/' );
		const excludedUrls = options.excluded || [];
		const extraUrlSettings = options.extraUrlSettings || [];

		if ( filePath.endsWith( '404.html' ) ) {
			continue;
		}

		if ( excludedUrls.find( excluded => filePath.includes( excluded ) ) ) {
			continue;
		}

		const extraUrlSetting = extraUrlSettings.find( setting => filePath.includes( setting.url ) );
		const sitemapItem = {
			url: urlForSitemap
		};

		if ( extraUrlSetting && extraUrlSetting.priority ) {
			sitemapItem.priority = Math.min( extraUrlSetting.priority, 1.0 );
		}

		sitemap.write( sitemapItem );
	}

	sitemap.end();

	return streamToPromise( sitemap )
		.then( data => {
			return new Promise( ( resolve, reject ) => {
				fs.writeFile( upath.resolve( upath.join( buildPath, dst, 'sitemap.xml' ) ), data.toString(), err => {
					if ( err ) {
						return reject( err );
					}

					return resolve();
				} );
			} );
		} );
};
