/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const { stringify } = require( 'javascript-stringify' );
const { cloneDeep } = require( 'lodash' );

module.exports = ( searchConfig, {
	groups = [],
	slug = '',
	customRanking = []
} = {} ) => {
	if ( !searchConfig ) {
		return null;
	}

	const dConfig = cloneDeep( searchConfig );
	dConfig.customRanking = dConfig.customRanking || [];
	const customRankingAll = Array.from( new Set( customRanking.concat( dConfig.customRanking ) ) );
	delete dConfig.customRanking;

	const options = {
		inputSelector: '#docsearch_input',
		algoliaOptions: {
			hitsPerPage: 10,
			attributesToRetrieve: '*'
		}
	};

	const docSearchConfig = Object.assign(
		{},
		dConfig,
		options,
		{
			isEnabled: dConfig.apiKey && dConfig.indexName,
			css: 'https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css',
			js: 'https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.js'
		}
	);
	const innerConfig = Object.assign(
		{},
		dConfig,
		options
	);

	docSearchConfig.scripts = {
		defaultScript: [
			'<script type="text/javascript">',
			`docsearch(${ stringify( innerConfig ) });`,
			'</script>'
		].join( '\n' )
	};

	const transformDataFunctions = getTransformDataFns( groups, slug );

	if ( transformDataFunctions ) {
		for ( const tag of Object.keys( transformDataFunctions ) ) {
			innerConfig.algoliaOptions.hitsPerPage = 250;
			const innerConfigStr = stringify( innerConfig ).replace( /^{|}$/g, '' );

			docSearchConfig.scripts[ tag ] = [
				'<script type="text/javascript">',
				'docsearch({',
				`${ innerConfigStr },`,
				`transformData: ${ transformDataFunctions[ tag ] }`,
				'});',
				'</script>'
			].join( '\n' );
		}
	}

	docSearchConfig.getCustomRanking = pagePath => {
		if ( !customRankingAll.length ) {
			return null;
		}

		const rankingDataOfPage = customRankingAll.find( data => {
			return data.url && pagePath.includes( data.url );
		} );

		return rankingDataOfPage ? rankingDataOfPage.rank : null;
	};

	return docSearchConfig;
};

function getTransformDataFns( groups, slug ) {
	if ( !Array.isArray( groups ) || groups.length === 0 ) {
		return null;
	}

	const functions = {};
	const tags = `[ ${ groups.map( g => `'${ g.slug }'` ).join( ', ' ) } ]`;

	for ( const g of groups ) {
		functions[ g.slug ] = [
			'function( hits ) {',

			'var sortingFn = function( a, b ) {',
			'a.custom_ranking = a.custom_ranking || 0;',
			'b.custom_ranking = b.custom_ranking || 0;',

			'if ( a.custom_ranking === b.custom_ranking ) return a.index - b.index;',
			'if ( a.custom_ranking > b.custom_ranking ) return -1;',
			'if ( a.custom_ranking < b.custom_ranking ) return 1;',
			'};',

			'var result = [];',
			`var tags = ${ tags };`,

			'var hitsGrouped = { api: [] };',

			`hitsGrouped[ '${ g.slug }' ] = hits`,
			'.filter( function( h ) {',
			`return h.tags.includes( '${ slug }' ) && h.tags.includes( '${ g.slug }' );`,
			'} )',
			'.slice( 0, 7 )',
			'.map( function( item, idx ) {',
			'item.index = idx;',
			'return item;',
			'} )',
			'.sort( sortingFn );',

			'tags.forEach( function( tag ) {',
			`if ( tag !== '${ g.slug }' ) {`,
			'hitsGrouped[ tag ] = hits',
			'.filter( function( h ) {',
			`return h.tags.includes( '${ slug }' ) && h.tags.includes( tag );`,
			'} )',
			'.slice( 0, 10 )',
			'.map( function( item, idx ) {',
			'item.index = idx;',
			'return item;',
			'} )',
			'.sort( sortingFn )',
			'.slice( 0, 3 );',
			'}',
			'} );',

			'var apiSearchHits = [];',

			'if ( window.apiSearch ) apiSearchHits = window.apiSearch();',

			'hitsGrouped.api = hitsGrouped.api.filter( function( h ) {',
			'var isDuplicated = false;',

			'for ( var i = 0; i < apiSearchHits.length; i++ ) {',
			'if ( h.url.includes( apiSearchHits[ i ].urlShort ) ) {',
			'isDuplicated = true;',
			'break;',
			'}',
			'}',

			'return !isDuplicated;',
			'} );',

			'hitsGrouped.api = ( apiSearchHits || [] ).concat( hitsGrouped.api );',

			`result = result.concat( hitsGrouped[ '${ g.slug }' ] );`,

			'tags.forEach( function( tag ) {',
			`if ( tag !== '${ g.slug }' ) result = result.concat( hitsGrouped[ tag ].slice( 0, 4 ) );`,
			'} );',

			'return result;',
			'}'
		].join( '' );
	}

	functions.defaultScript = [
		'function( hits ) {',
		'var sortingFn = function( a, b ) {',
		'a.custom_ranking = a.custom_ranking || 0;',
		'b.custom_ranking = b.custom_ranking || 0;',

		'if ( a.custom_ranking === b.custom_ranking ) return a.index - b.index;',
		'if ( a.custom_ranking > b.custom_ranking ) return -1;',
		'if ( a.custom_ranking < b.custom_ranking ) return 1;',
		'};',

		'var result = [];',
		`var tags = ${ tags };`,

		'var hitsGrouped = { api: [] };',

		'tags.forEach( function( tag ) {',
		'hitsGrouped[ tag ] = hits',
		'.filter( function( h ) {',
		`return h.tags.includes( '${ slug }' ) && h.tags.includes( tag );`,
		'} )',
		'.slice( 0, 10 )',
		'.map( function( item, idx ) {',
		'item.index = idx;',
		'return item;',
		'} )',
		'.sort( sortingFn )',
		'.slice( 0, 3 );',
		'} );',

		'var apiSearchHits = [];',

		'if ( window.apiSearch ) apiSearchHits = window.apiSearch();',

		'hitsGrouped.api = hitsGrouped.api.filter( function( h ) {',
		'var isDuplicated = false;',

		'for ( var i = 0; i < apiSearchHits.length; i++ ) {',
		'if ( h.url.includes( apiSearchHits[ i ].urlShort ) ) {',
		'isDuplicated = true;',
		'break;',
		'}',
		'}',

		'return !isDuplicated;',
		'} );',

		'hitsGrouped.api = ( apiSearchHits || [] ).concat( hitsGrouped.api );',

		'tags.forEach( function( tag ) {',
		'result = result.concat( hitsGrouped[ tag ].slice( 0, 4 ) );',
		'} );',

		'return result;',
		'}'
	].join( '' );

	return functions;
}
