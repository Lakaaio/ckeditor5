/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const AbstractParser = require( './abstractparser' );

module.exports = class EventParser extends AbstractParser {
	/**
	 * @param {TypedocReflectionMeta} item
	 * @returns {Boolean}
	 */
	canParse( item ) {
		return item.kindString === 'Event';
	}

	/**
	 * @param {TypedocReflection<'Event'>} item
	 * @param {String} parentName
	 * @returns {Object}
	 */
	parse( item, parentName ) {
		// TypeDoc adds the "event:" prefix to the event name to make sure the name is unique in the scope of its parent.
		// Here, in the parser, we do not need it anymore.
		item.name = item.name.replace( 'event:', '' );

		return {
			// Needed for post-processing once all project reflections are converted.
			_signature: [
				{},
				// As events are our custom implementation, TypeDoc does not allow creating `parameters` property for them. Event parameters
				// are passed in `typeParameters` property. To process the event parameters properly, we manually map `typeParameters` into
				// `parameters` property.
				{ parameters: item.typeParameters }
			],

			name: item.name,
			memberof: parentName,
			longname: this.getLongName( item, parentName ),

			scope: this.getScope( item ),
			kind: this.getKind( item ),
			extraId: this.getExtraId( item ),
			description: this.getComment( item ),
			file: this.getFile( item ),
			skipSource: this.shouldSkipSource( item ),
			deprecated: this.isDeprecated( item ),
			inherited: !!item.inheritedFrom,
			see: this.getRelated( item, parentName ),

			// These properties will be filled in the post-processing phase.
			params: null
		};
	}
};
