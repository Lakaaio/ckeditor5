/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const AbstractParser = require( './abstractparser' );

module.exports = class ErrorParser extends AbstractParser {
	/**
	 * @param {TypedocReflectionMeta} item
	 * @returns {Boolean}
	 */
	canParse( item ) {
		return item.kindString === 'Error';
	}

	/**
	 * @param {TypedocReflection<'Error'>} item
	 * @returns {Object}
	 */
	parse( item ) {
		return {
			_signature: [
				{},
				// As errors are our custom implementation, TypeDoc does not allow creating `parameters` property for them. Error parameters
				// are passed in `typeParameters` property. To process the error parameters properly, we manually map `typeParameters` into
				// `parameters` property.
				{ parameters: item.typeParameters }
			],

			kind: this.getKind( item ),
			scope: 'inner',
			name: item.name,
			longname: `module:errors/${ item.name }`,
			extraId: this.getExtraId( item ),
			description: this.getComment( item ),

			// This property will be filled in the post-processing phase.
			params: null
		};
	}
};
