/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const AbstractParser = require( './abstractparser' );

module.exports = class ConstantParser extends AbstractParser {
	/**
	 * @param {TypedocReflectionMeta} item
	 * @returns {Boolean}
	 */
	canParse( item ) {
		return item.kindString === 'Variable';
	}

	/**
	 * @param {TypedocReflection<'Variable'>} item
	 * @param {String} parentName
	 * @returns {Object}
	 */
	parse( item, parentName ) {
		return {
			// Needed for post-processing once all project reflections are converted.
			_signature: item,

			name: item.name,
			memberof: parentName,
			longname: this.getLongName( item, parentName ),

			scope: 'inner',
			kind: this.getKind( item ),
			extraId: `constant-${ item.name }`,
			file: this.getFile( item ),
			skipSource: this.shouldSkipSource( item ),
			description: this.getComment( item ),
			deprecated: this.isDeprecated( item ),

			// This property will be filled in the post-processing phase.
			type: null
		};
	}
};
