/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const path = require( 'path' );
const fs = require( 'fs' );
const chalk = require( 'chalk' );
const compileSass = require( './tasks/compile-sass' );
const runWebpack = require( './tasks/run-webpack' );
const copyAssets = require( './tasks/copy-assets' );
const createSymLinks = require( './tasks/create-sym-links' );
const buildDocumentation = require( './tasks/build-documentation' );
const getProjectConfig = require( './tasks/get-project-config' );
const cacheFiles = require( './tasks/cache-files' );
const watcher = require( './tasks/watcher' );
const validateHtml = require( './tasks/validate-html-w3c' );
const umbertoVersion = require( '../package.json' ).version;
const umbertoDir = path.join( __dirname, '..' );
const themeDir = path.join( __dirname, '../themes/umberto' );
// Theme's styles and scripts path.
const sourceDir = path.join( themeDir, 'src' );
const outputDir = path.join( process.cwd(), 'build/docs' );
const cacheDir = path.join( __dirname, '../temp/cache' );
const stylesSource = path.join( sourceDir, 'css', 'styles.scss' );
const stylesDestination = path.join( outputDir, 'assets', umbertoVersion, 'css', 'styles.css' );

module.exports = {
	/**
	 * Builds documentation for a single project.
	 * Intended to use within project's task runner or along other build scripts.
	 *
	 * @param {Object} [options={}]
	 * @param {Boolean} [options.skipApi=false] Skips rendering API docs.
	 * @param {Boolean} [options.skipValidation=false] Skips validating links.
	 * @param {Boolean} [options.skipLiveSnippets=false] Skips building live code snippets. Live code snippets is an
	 * extra feature and is usually not used.
	 * @param {Object} [options.snippetOptions={}] Additional options passed to snippetAdapter.
	 * @param {Boolean} [options.dev=false] Skip js minification, don't clear build directory when rebuilding docs,
	 * reuse unchanged files.
	 * @param {Boolean} [options.verbose=false] Adds more information to console during documentation building.
	 * @param {Boolean} [options.createSymLinks=true] Add symbolic links with 'latest' to output folder.
	 * @param {Boolean} [options.watch=false] Run Umberto with watch mode, which track changes in dm files and rebuild docs with it.
	 * @param {Boolean} [options.validateW3C=false] Use vnu java validator to check every single output page for html syntax errors.
	 * @returns {Promise}
	 */
	buildSingleProject( options ) {
		const pConfig = getProjectConfig( process.cwd(), options );
		const timer = process.hrtime();

		return buildDocumentation( Object.assign(
			options,
			{
				mainConfig: {
					projects: [ '.' ],
					docsearch: pConfig.docsearch,
					googleoptimize: pConfig.googleoptimize,
					googletagmanager: pConfig.googletagmanager,
					googleanalytics: pConfig.googleanalytics,
					feedbackWidget: pConfig.feedbackWidget,
					isSingleProject: true,
					canonicalUrlBeginning: pConfig.canonicalUrlBeginning
				}
			}
		) )
			.then( hexoManager => postBuild( options, hexoManager ) )
			.then( hexoManager => {
				const time = process.hrtime( timer );

				console.log( `Building documentation complete in ${ Math.floor( time[ 0 ] / 60 ) }m ${ time[ 0 ] % 60 }.${ time[ 1 ] }s.` );

				return hexoManager;
			} )
			.then( hexoManager => {
				if ( options.watch ) {
					return watcher( hexoManager );
				} else {
					return Promise.resolve();
				}
			} )
			.catch( err => {
				console.error( `Building documentation failed: ${ err.stack }` );
				process.exitCode = 1;

				throw err;
			} );
	},

	/**
	 * Builds documentation for multiple projects at once.
	 *
	 * @param {Object} [options={}]
	 * @param {Boolean} [options.skipApi=false] Skips rendering API docs.
	 * @param {Boolean} [options.skipValidation=false] Skips validating links.
	 * @param {Boolean} [options.skipLiveSnippets=false] Skips building live code snippets. Live code snippets is an
	 * extra feature and is usually not used.
	 * @param {Object} [options.snippetOptions={}] Additional options passed to snippetAdapter.
	 * @param {Boolean} [options.dev=false] Skip js minification, don't clear build directory when rebuilding docs,
	 * reuse unchanged files.
	 * @param {Boolean} [options.verbose=false] Adds more information to console during documentation building.
	 * @param {Boolean} [options.createSymLinks=true] Add symbolic links with 'latest' to output folder.
	 * @param {Boolean} [options.watch=false] Run Umberto with watch mode, which track changes in dm files and rebuild docs with it.
	 * @param {Boolean} [options.validateW3C=false] Use vnu java validator to check every single output page for html syntax errors.
	 * @returns {Promise}
	 */
	buildMultiProjects( options ) {
		const timer = process.hrtime();

		return buildDocumentation( options )
			.then( hexoManager => postBuild( options, hexoManager ) )
			.then( hexoManager => {
				const time = process.hrtime( timer );

				console.log( chalk.greenBright(
					`Building documentation complete in ${ Math.floor( time[ 0 ] / 60 ) }m ${ time[ 0 ] % 60 }.${ time[ 1 ] }s.`
				) );

				return hexoManager;
			} )
			.then( hexoManager => {
				if ( options.watch ) {
					return watcher( hexoManager );
				} else {
					return Promise.resolve();
				}
			} )
			.catch( err => {
				console.error( `Building documentation failed: ${ err.stack }` );
				process.exitCode = 1;

				throw err;
			} );
	}
};

// Compiles and copies Umberto assets to build directory.
function postBuild( options, hexoManager ) {
	// Compile theme's scripts.
	return Promise.resolve()
		.then( () => {
			// Allows to skip webpack for subsequent local builds.
			const jsExistsInBuild = fs.existsSync( path.join( outputDir, 'assets', umbertoVersion, 'scripts', 'app.js' ) );

			if ( !options.dev || !jsExistsInBuild || cacheFiles( path.join( sourceDir, 'js' ), path.join( cacheDir, 'umberto-js' ) ) ) {
				return runWebpack(
					path.join( sourceDir, 'js', 'app.js' ),
					path.join( outputDir, 'assets', umbertoVersion, 'scripts' ),
					{
						minify: !options.dev,
						umbertoDir,
						version: umbertoVersion
					}
				);
			} else {
				console.log( 'No theme JS files have changed since last local run, skipping webpack.' );

				return Promise.resolve();
			}
		} )
		.then( () => copyAssets() )
		.then( () => compileSass( stylesSource, stylesDestination ) )
		.then( () => {
			if ( options.validateW3C ) {
				return validateHtml( outputDir, options );
			} else {
				return Promise.resolve();
			}
		} )
		.then( () => {
			if ( options.createSymLinks || options.createSymLinks === undefined ) {
				return createSymLinks( {
					rootPath: process.cwd(),
					isSingleProject: options.mainConfig ? options.mainConfig.isSingleProject : false
				} );
			}
		} )
		.then( () => Promise.resolve( hexoManager ) );
}
