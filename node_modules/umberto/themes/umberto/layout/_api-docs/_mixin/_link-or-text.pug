//- @param {String} name
//- @param {Object} [options]
//- @param {String} [options.aClass]
//- @param {String} [options.linkText]
mixin linkOrText( name, options = {} )
	- const extracted = extractLongname( name );

	span #{ extracted.prefix }
		each longname, index in extracted.longnames
			- const { aClass, linkText } = options;
			- const parts = splitLongname( longname );
			- const linkLongname = getUrlAddressFromLongname( parts );
			- const hashSplit = longname.split( '#' );

			- const linkHashSplit = linkLongname ? linkLongname.split( '#' ) : hashSplit;
			- const linkAutoHash = linkHashSplit.length > 1 ? linkHashSplit[ 1 ] : '';
			- const link = longnameToUrl( linkHashSplit[ 0 ], linkAutoHash );

			- let nameText = '';

			if ( linkText )
				- nameText = linkText;
			else
				if ( parts.className )
					- nameText = parts.className
					if ( parts.className !== parts.name )
						- nameText += ( parts.isStatic ? '.' : '#' ) + parts.name
				else
					- nameText = parts.name || parts.longnameBase

			- nameText = htmlsafe( nameText );

			if ( link )
				a( class=aClass href=link.replace( 'event:', 'event-') ) !{ nameText }
			else
				| #{ nameText }

			if index < extracted.longnames.length - 1
				| #{ extracted.separators[ index ] }

		| #{ extracted.suffix }
