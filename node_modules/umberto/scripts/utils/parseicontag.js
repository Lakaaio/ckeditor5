/**
 * @license Copyright (c) 2017-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */

'use strict';

const crypto = require( 'crypto' );
const upath = require( 'upath' );

const ICON_REGEXP = /\\?{@icon(?:\s+@(\w+))?\s+([^}\s]+)\s*([^}]*)\\?}/g;

/**
 * Replaces the `{@icon [@projectName] path/to/icon}` expression with the HTML snippet:
 *
 *      <img src="../path/to/icon" class="editor-icon" />
 *
 * @param {Object} page
 * @param {Object} hexo
 * @returns {Object}
 */
module.exports = function parseIconTag( page, hexo ) {
	const relativeUrlHelper = hexo.extend.helper.store.relative_url;
	const availableProjects = Object.keys( hexo.projectGlobals ).filter( projectName => projectName !== 'common' );

	page.content = page.content.replace( ICON_REGEXP, ( match, iconProject, iconPath, alternativeText ) => {
		const options = {
			isSingleProject: hexo.projectGlobals.common.isSingleProject,
			pageProject: page.projectName,
			iconProject,
			availableProjects
		};

		if ( !shouldTransformIcon( options ) ) {
			return match;
		}

		if ( match.startsWith( '\\{' ) ) {
			return match.replace( /^\\{/, '{' ).replace( /\\}$/, '}' );
		}

		const projectName = iconProject || page.projectName;
		const projectDetails = hexo.projectGlobals[ projectName ];
		const fileName = sha1( iconPath ).substr( 0, 10 ) + upath.extname( iconPath );

		// Map the original file name with the hashed version to predict the path when copying assets.
		projectDetails._icons.set( iconPath, fileName );

		let alt = '';

		if ( alternativeText ) {
			alt = `alt="${ alternativeText }" `;
		}

		const absoluteLikePath = upath.join( projectName, projectDetails.config.version, 'assets', 'icons', fileName );

		return [
			'<span class="editor-icon">' +
				`<img src="${ relativeUrlHelper( page.path, absoluteLikePath ) }" class="editor-icon__image" ${ alt }/>` +
			'</span>'
		].join( '' );
	} );

	return page;
};

/**
 * Checks whether the `{@icon}` expression should be transformed to proper `<img>` tag.
 *
 * @param {Object} options
 * @param {Boolean} options.isSingleProject Whether building for a single project.
 * @param {String} options.pageProject The project of the current processed page.
 * @param {String} options.iconProject The project specified in the `{@icon}` expression.
 * @param {Array.<String>} options.availableProjects Available projects when building the non-single project documentation.
 * @return {Boolean}
 */
function shouldTransformIcon( options ) {
	// {@icon path} - missing the @projectName part.
	// Assuming, that loading an icon for the page's project.
	if ( !options.iconProject ) {
		return true;
	}

	// Building a page that belongs to the same project as specified in the icon.
	if ( options.iconProject === options.pageProject ) {
		return true;
	}

	// Building many projects. Check whether the project exists.
	if ( !options.isSingleProject && options.availableProjects.includes( options.iconProject ) ) {
		return true;
	}

	return false;
}

/**
 * @param {String} value
 * @return {String}
 */
function sha1( value ) {
	const shasum = crypto.createHash( 'sha1' );
	shasum.update( value );

	return shasum.digest( 'hex' );
}
